{"version":3,"sources":["axios.js","Requests.js","Banner.js","Nav.js","Row.js","screens/HomeScreen.js","firebase.js","screens/SignupScreen.js","screens/LoginScreen.js","features/userSlice.js","screens/ProfileScreen.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","string","n","useState","movie","setMovie","useEffect","a","get","request","data","results","Math","floor","random","length","Request","fetchData","console","log","className","style","backgroundSize","backgroundImage","backdrop_path","backgroundPosition","title","name","original_name","overview","substr","Nav","show","handleShow","history","useHistory","transitionNavBar","window","scrollY","addEventListener","removeEventListener","onClick","push","src","alt","Row","fetchUrl","isLargeRow","movies","setMovies","map","poster_path","id","HomeScreen","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","GoogleAuthProvider","SignupScreen","emailRef","useRef","passwordRef","ref","placeholder","type","e","preventDefault","createUserWithEmailAndPassword","current","value","then","authUser","catch","error","alert","message","LoginScreen","signIn","setSignIn","userSlice","createSlice","initialState","user","reducers","login","state","action","payload","logout","actions","selectUser","ProfileScreen","useSelector","email","signOut","App","dispatch","useDispatch","onAuthStateChanged","userAuth","uid","path","exact","configureStore","reducer","userReducer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b03ba9f7.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n\tbaseURL:\"http://api.themoviedb.org/3\",\r\n});\r\n\r\nexport default instance;","const API_KEY = \"98caf4fcf4d40820a9a9f0a831268d64\";\r\n\r\nconst requests = {\r\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n  }\r\n  \r\n  export default requests;","import React,{ useState,useEffect } from \"react\";\r\nimport \"./Banner.css\";\r\nimport axios from \"./axios\";\r\nimport requests from \"./Requests\";\r\n\r\n\r\nfunction Banner() {\r\n                      const [movie, setMovie] = useState([]);\r\n\r\n\tuseEffect(() => {\r\n\t\tasync function fetchData() {\r\n\t\t\tconst request = await axios.get(requests.fetchNetflixOriginals);\r\n\t\t\tsetMovie(\r\n\t\t\t\trequest.data.results[\r\n\t\t\t\t\tMath.floor(Math.random() * request.data.results.length - 1)\r\n\t\t\t\t]\r\n\t\t\t);\r\n\t\t\treturn Request;\r\n\t\t}\r\n\t\tfetchData();\r\n\t}, [] );\r\n\r\n\tconsole.log(movie);\r\n                function truncate(string, n) {\r\n\t\t\treturn string?.length > n ? string.substr(0, n - 1) +\"...\": string;\r\n\t\t\t\r\n\t\t}\r\n\r\n\r\n\r\n\treturn (\r\n\t\t<header  \r\n\t\tclassName=\"banner\"\r\n\t\t style={{\r\n\t\t\t backgroundSize:\"cover\",\r\n\t\t\t backgroundImage: `url( \"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\"\r\n                                   )`,\r\n\t\t        \tbackgroundPosition: \"center center\",\r\n\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\t<div className=\"banner__contents\">\r\n\t\t\t\t<h1 className=\"banner__title\">\r\n\t\t\t\t {movie?.title || movie?.name || movie?.original_name}\t\r\n\t\t\t\t</h1>\r\n\t\t\t\r\n\t\t\t\t<div className=\"banner__buttons\">\r\n\t\t\t\t<button className=\"banner__button\">Play</button>\r\n\t\t\t\t<button className=\"banner__button\">My List</button>\r\n\r\n\t\t\t\t</div>\r\n\t\t\t\t<h1 className=\"banner__description\">\r\n\t\t\t\t {truncate(movie?.overview, 150)}\t\r\n\t\t\t\t</h1>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"banner--fadeBottom\" />\r\n\t\t\t</header>\r\n\t);\r\n}\r\n\r\nexport default Banner;","import React, { useState, useEffect }  from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport \"./Nav.css\";\r\n\r\nfunction Nav() {\r\n\tconst [show , handleShow] = useState(false);\r\n        const history =useHistory();\r\n\r\n\tconst transitionNavBar = () => {\r\n\t\tif(window.scrollY > 100) {\r\n\t\t handleShow( true);\r\n          } else {\r\n\t\t  handleShow(false);\r\n\t          }\r\n         \t};\r\n\t\tuseEffect(()   =>{\r\n\t\t   window.addEventListener(\"scroll\",transitionNavBar);\r\n\t\t   return() => { window.removeEventListener(\"scroll\",transitionNavBar) \r\n\t\t}\r\n\t\t},[]);\r\n\r\n\r\n\treturn (\r\n                   <div className={`nav ${show && \"nav__black\"}`}>\r\n\t\t\t<div className=\"nav__contents\">\r\n\t\t\t<img\r\n\t\t\tonClick={() => history.push(\"\")}\r\n\t\t\tclassName=\"nav__logo\" \r\n\t\t\tsrc=\"http://assets.stickpng.com/images/580b57fcd9996e24bc43c529.png\" alt=\"\"\r\n\t\t\t/>\r\n\t\t         <img\r\n\t\t\t onClick={() => history.push(\"/profile\")}\r\n\t\t\t className=\"nav__avatar\" \r\n\t\t\tsrc=\"https://www.designmantic.com/blog/wp-content/uploads/2016/07/Netflix-Revamps-Logo-1280x720.jpg\" alt=\"\"\r\n\t\t\t/>\r\n\t\t\t\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Nav;","import React, {useState, useEffect } from \"react\";\r\nimport axios from \"./axios\";\r\nimport \"./Row.css\";\r\n\r\nfunction Row({ title, fetchUrl, isLargeRow = false }) {\r\n \tconst [movies, setMovies] = useState ([]);\r\n\r\n\t const base_url =\"http://image.tmdb.org/t/p/original/\";\r\n                  \r\n\t useEffect(()  => {\r\n\t\t async function fetchData() {\r\n\t\t\t const request =await axios.get(fetchUrl);\r\n\t\t\t setMovies(request.data.results);\r\n\t\t\t return request;\r\n\t\t\t \r\n\t\t }\r\n\t\t fetchData();\r\n\r\n\t }, [fetchUrl]);\r\n\t \r\n\r\n\t\r\n\t return (\r\n\t\t<div className=\"row\">\r\n                <h2>{title}</h2>\r\n\t\t<div className=\"row__posters\">\r\n\r\n\t\t\t{ movies.map(movie =>(\r\n\t\t\t\t((isLargeRow && movie.poster_path) ||\r\n\t\t\t\t(!isLargeRow && movie.backdrop_path)) && ( \r\n                                    <img\r\n\t\t\t\t    className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\r\n\t\t\tkey={movie.id}\r\n\t\t\t\t   src={`${base_url}${\r\n\t\t         isLargeRow ? movie.poster_path : movie.backdrop_path\t\r\n\t\t\t\t    } `}\r\n\t\t\t\t     alt={movie.name}\r\n\t\t\t />\r\n\t\t\t\t))\t\r\n\t\t\t\r\n\t\t)}\t\t\r\n\r\n\r\n\t\t</div>\r\n\r\n\t\t\t\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Row;\r\n ","import React from \"react\";\r\nimport Banner from \"../Banner\";\r\nimport \"../screens/HomeScreen.css\"\r\nimport Nav from \"../Nav\";\r\nimport requests from \"../Requests\";\r\nimport Row from \"../Row\";\r\n \r\n\r\n\r\n\r\nfunction HomeScreen() {\r\n\treturn (\r\n\t\t<div className=\"homeScreen\">\r\n\t\r\n\t<Nav />\r\n\t<Banner />\r\n\t               <Row  \r\n\t\t\ttitle='NETFLIX ORGINALS'\r\n\t\t\tfetchUrl={requests.fetchNetflixOriginals}\r\n\t\t\tisLargeRow\r\n\t\t\t/>\r\n\t                  <Row  title=\"Trending\" fetchUrl={requests.fetchTrending}/>\r\n                          <Row  title=\"Top Rated\" fetchUrl={requests.fetchTopRated} />\r\n\t\t\t<Row  title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />\r\n\r\n\t\r\n\t                \t\r\n       \t\t</div>\r\n\t);\r\n}\r\n\r\nexport default HomeScreen;\r\n","\r\nimport firebase from \"firebase\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/database\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyDUWQ7mebBXs2cVad8gN2SQ2s2C3rpK4lU\",\r\n  authDomain: \"netflix-clone-3ad49.firebaseapp.com\",\r\n  projectId: \"netflix-clone-3ad49\",\r\n  storageBucket: \"netflix-clone-3ad49.appspot.com\",\r\n  messagingSenderId: \"599440690382\",\r\n  appId: \"1:599440690382:web:309ce417bd20e3a528149f\",\r\n  measurementId: \"G-VQ88YMLJCH\"\r\n};\r\n\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\nconst auth = firebase.auth();\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\n\r\n\r\n\r\n \r\nexport { auth, provider };\r\n\r\n","import React,{ useRef } from \"react\";\r\nimport { auth } from \"../firebase\";\r\n\r\n\r\nimport \"./SignupScreen.css\" ;\r\n\r\n\r\nfunction SignupScreen() {\r\n\t          const emailRef =useRef(null);\r\n\t\t  const passwordRef =useRef(null);\r\n\r\n                      const register =(e) => {\r\n\t\t\t      e.preventDefault();\r\n                           auth\r\n\t\t      .createUserWithEmailAndPassword(\r\n\t\t\t      emailRef.current.value,\r\n\t\t\t      passwordRef.current.value\r\n\t\t      ) \r\n\t\t \t  \r\n\t\t\t.then((authUser) => {\r\n\t\t\t\tconsole.log(authUser);\r\n\t\t\t})\r\n\t\t\t.catch((error) =>    {\r\n\t\t\talert(error.message);\r\n\t\t\t});\r\n\t\t      };\r\n\r\n\t\t      const signIn =(e) => {\r\n\t\t\t      e.preventDefault();\r\n\t\t\t  \r\n\t\t\t   auth\r\n\t\t      .createUserWithEmailAndPassword(\r\n\t\t\t      emailRef.current.value,\r\n\t\t\t      passwordRef.current.value\r\n\t\t      ) \r\n\t\t\t\t\r\n\r\n\t\t\t      .then((authUser) => {\r\n\t\t\t\t      console.log(authUser);\r\n\t\t\t      } )\r\n\t\t\t      .catch((error) =>{\r\n\t\t\t       alert(error.message);\r\n\t\t\t});\r\n\t\t      }\r\n\t\r\n\treturn (\r\n\t\t<div className=\"signupScreen\">\r\n\t\t<form>\r\n\t\t\t<h1>Sign In</h1>\r\n\t\t\t<input ref={emailRef} placeholder=\"Email\" type=\"email\"  />\r\n\t\t\t <input ref={passwordRef} placeholder=\"Password\"type=\"password\" />\r\n                <button type=\"submit\" onClick={signIn}>Sign In</button>\r\n\r\n\t\t<h4> <span className=\"signupScreen__gray\"> New to Netflix?</span>\r\n\t\t\t<span className=\"signupScreen__link\"onClick={register}> Sign Up Now</span>\r\n                    </h4>\r\n\t\t\t</form>\t\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default SignupScreen;","import React, { useState } from 'react'\r\nimport \"./LoginScreen.css\";\r\nimport SignupScreen from './SignupScreen';\r\n\r\nfunction LoginScreen() {\r\n                        const [signIn, setSignIn] = useState(false);\r\n\r\n\treturn( \r\n\t\t<div className=\"loginScreen\">\r\n\t\t\t<div className=\"loginScreen__background\">\r\n\t\t\t\t<img\r\n\t\t\t         className=\"loginScreen__logo\"\t\r\n\t\t\t\tsrc=\"https://assets.stickpng.com/images/580b57fcd9996e24bc43c529.png\" alt=\"\" />\r\n                                        \r\n\t\t\t\t\t<button onClick={() => setSignIn(true)}\r\n\t\t\t\t\t className=\"loginScreen__button\t\">\r\n\r\n\t\t\t\tSign In\t</button>\r\n\t\t\t\t <div className=\"loginScreen__gradient\">\r\n\t\t\t\t </div>\r\n\t\t\t\t  <div className=\"loginScreen__body\">\r\n                                       {signIn ? (\r\n\t\t\t\t\t        <SignupScreen/>\r\n\t\t\t\t       ):( \r\n                                        \r\n\t\t\t\t\t <>\r\n\t\t\t\t\t  <h1> Unlimited films, TV programmer and more.</h1>\r\n\t                             <h2>watch anywhere. Cancel at any time.</h2>\t\t\t\t \r\n\t\t\t\t\t <h3>Ready to watch? Enter you email to create or restart your membership</h3>\r\n\t\t\t\t\t  <div className=\"loginScreen__input\">\r\n                                          <form>\r\n\t\t\t\t\t\t  <input type=\"email\" placeholder=\"Email address\" />\r\n\t\t\t\t\t\t   <button  onClick={() => setSignIn(true)}\r\n\t\t\t\t\t\t    className=\"loginScreen__getStarted\">\r\n\t\t\t\t\t\t\t   GET STARTE\r\n\t\t\t\t\t\t   </button>\r\n\t\t\t\t\t\t  </form> \r\n                                          </div>    \r\n\t\t\t\t\t \r\n\t\t\t\t\t \r\n\t\t\t\t\t \r\n\t\t\t\t\t  </>\r\n\t\t\t\t       )}\r\n\r\n\t\t\t\t\t \r\n\t\t\t\t\t  </div>\r\n\t\t\t</div>\r\n\t\t\t\r\n\t\t</div>\r\n       );\t\r\n}\r\n\r\nexport default LoginScreen;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const userSlice = createSlice({\nname:\"user\",\ninitialState : {\n  user: null,\n},\nreducers:{\n  login:(state,action) => {\n    state.user = action.payload;\n  },\n  logout: (state) => {\n    state.user = null;\n  },\n},\n\n});\nexport const { login, logout} =userSlice.actions;\n\nexport const selectUser =(state) => state.user.user;\n\nexport default userSlice.reducer;\n\n\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectUser } from \"../features/userSlice\";\r\nimport { auth } from \"../firebase\";\r\n\r\n\r\n\r\nimport Nav from \"../Nav\";\r\nimport \"./ProfileScreen.css\";\r\n\r\nfunction ProfileScreen() {\r\n\tconst user =useSelector(selectUser);\r\n\treturn (\r\n\t\t<div className=\"profileScreen\">\r\n\t\t\t<Nav />\r\n\t\t\t<div className=\"profileScreen__body\">\r\n                             <h1>Edit profile</h1>\r\n\t\t\t     <div className=\"profileScreen__info\">\r\n\t\t\t\t     <img \r\n\t\t\t\t     src=\"https://www.designmantic.com/blog/wp-content/uploads/2016/07/Netflix-Revamps-Logo-1280x720.jpg\"\r\n\t\t\t\t     alt=\"\"\r\n\t\t\t\t     />\r\n\t\t\t\t     <div className=\"profileScreen__details\">\r\n                                           <h2>{user.email}</h2>\r\n\t\t\t\t\t   <div className=\"profile__plans\">\r\n\t\t\t\t\t\t   <h3> Plane </h3>\r\n\r\n\t\t\t\t\t\t \r\n                                           <button  onClick={() => auth.signOut()} \r\n\t\t\t\t\t   className=\"profileScreen__signOut\"\r\n\t\t\t\t\t   >\r\n\t\t\t\t\t\t   Sign Out\r\n\t\t\t\t\t\t   </button>\r\n\t\t\t\t\t   </div>\r\n\t\t\t\t     </div>\r\n\r\n\t\t\t     </div>\r\n\t\t\t</div>\r\n\t\t\t\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default ProfileScreen;\r\n","import React,{useEffect } from \"react\";\nimport \"./App.css\";\nimport HomeScreen from \"./screens/HomeScreen\";\nimport { BrowserRouter as Router, Switch,Route} from \"react-router-dom\";\nimport LoginScreen from \"./screens/LoginScreen\";\nimport {auth } from \"./firebase\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport { login, logout, selectUser } from \"./features/userSlice\";\nimport ProfileScreen from \"./screens/ProfileScreen\";\n\n\n\nfunction App() {\n  const user =useSelector(selectUser);\n   const dispatch = useDispatch();\n        \nuseEffect(() =>{\n   \nconst unsubscribe= auth.onAuthStateChanged((userAuth) => { \n  if (userAuth) {\n    console.log(userAuth);\n  dispatch(login({\n    uid: userAuth.uid,\n    email: userAuth.email,\n  })\n);\n} else {\n dispatch(logout());\n}\n}); \nreturn unsubscribe;\n\n},[dispatch] );\n\n    return (\n    <div className=\"app\">\n     <Router>\n      {!user ? (\n               \n             \n                 <LoginScreen />    \n      ): (\n\n       <Switch>\n              \n              \n\n         <Route path=\"/profile\">\n                     <ProfileScreen/>\n                    </Route>\n          \n         <Route exact path=\"/\">\n                    <HomeScreen />\n            </Route>\n         </Switch>\n         \n      )}\n         </Router>\n            </div>\n  );\n\n      }\nexport default App;","import { configureStore } from \"@reduxjs/toolkit\";\nimport userReducer from \"../features/userSlice\";\n\nexport default configureStore({\n  reducer: {\n    user: userReducer,\n  },\n});\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store  from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n \n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n   \n    </Provider>\n    \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}